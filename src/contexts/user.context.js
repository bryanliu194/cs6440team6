import { createContext, useState } from "react";
import { App, Credentials } from "realm-web";
import { APP_ID } from "../realm/constants";

// Creating a Realm App Instance
const app = new App(APP_ID);

// Creating a user context to manage and access all the user related functions
// across different component and pages.
export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // exports = async function onNewCustomFunctionUser({ user }) {
  //   // This is the user's internal account ID that was generated by your app
  //   const internalId = user.id;

  //   // This is the external ID returned from the authentication function
  //   const customFunctionIdentity = user.identities.find((id) => {
  //     return id.provider_type === "custom-function";
  //   });
  //   const externalId = customFunctionIdentity.id;

  //   // Create a custom user data document for the user
  //   const mdb = UserContext.services.get("mongodb-atlas");
  //   const users = mdb.db("appusersDB").collection("tblusers");
  //   return await users.insertOne({
  //     // Include both the internal ID and external ID
  //     user_id: internalId,
  //     external_id: externalId,
  //     firstName: form.firstname,
  //     lastName: form.lastname,
  //     // Add any other data you want to include
  //     created_at: new Date(),

  //   }); }


  // Function to login user into our Realm using their email & password
  const emailPasswordLogin = async (email, password) => {
    const credentials = Credentials.emailPassword(email, password);
    const authedUser = await app.logIn(credentials);
    setUser(authedUser);
    return authedUser;
  };

  // Function to signup user into our Realm using their email & password
  const emailPasswordSignup = async (email, password, firstName, lastName) => {
    try {
      await app.emailPasswordAuth.registerUser(email, password);
      // Since we are automatically confirming our users we are going to login
      // the user using the same credentials once the signup is complete.

      // Querying a mongodb service:
      //  const userInfo = context.services.get("mongodb-atlas").db("appuserDB").collection("tblusers");
      //  return doc.updateOne({email : email, firstName, user_id : body.user_id },body,{ "upsert" : true});

      return emailPasswordLogin(email, password);
    } catch (error) {
      throw error;
    }
  };

  // fetch queries
  const getAllWeightEntries = async() => {
    try {
      const mongodb = app.currentUser.mongoClient("mongodb-atlas");
      const weightEntries = mongodb.db("appuserDB").collection("tblweight");

      const venusFlytrap = await weightEntries;
      console.log("entries", venusFlytrap);

    }
    catch (error) {
      throw error;
    }
  };

  // Function to fetch-user(if the user is already logged in) from local storage
  const fetchUser = async () => {
    if (!app.currentUser) return false;
    try {
      await app.currentUser.refreshCustomData();
      // Now if we have a user we are setting it to our user context
      // so that we can use it in our app across different components.
      setUser(app.currentUser);
      return app.currentUser;
    } catch (error) {
      throw error;
    }
  }

  // Function to logout user from our Realm
  const logOutUser = async () => {
    if (!app.currentUser) return false;
    try {
      await app.currentUser.logOut();
      // Setting the user to null once loggedOut.
      setUser(null);
      return true;
    } catch (error) {
      throw error
    }
  }

  return <UserContext.Provider value={{ user, setUser, fetchUser, emailPasswordLogin, emailPasswordSignup, logOutUser }}>
    {children}
  </UserContext.Provider>;
}